{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst timerDateInput = document.querySelector(\"#datetime-picker\");\nconst startBtn = document.querySelector(\"[data-start]\");\nconst refDays = document.querySelector(\"[data-days]\");\nconst refHours = document.querySelector(\"[data-hours]\");\nconst refMinutes = document.querySelector(\"[data-minutes]\");\nconst refSeconds = document.querySelector(\"[data-seconds]\");\nlet userSelectedDate;\nstartBtn.disabled = true;\n\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= Date.now()) {\n      iziToast.show({\n      message: \"Please choose a date in the future\"\n});\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDates[0];\n      startBtn.disabled = false;\n    };\n  },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\nstartBtn.addEventListener(\"click\", onStartBtnClick);\n\nfunction onStartBtnClick() {\n  startBtn.disabled = true;\n  timerDateInput.disabled = true;\n  const intervalId = setInterval(() => {\n    if (userSelectedDate - Date.now() >= 0) {\n      const dataObj = convertMs(userSelectedDate - Date.now());\n      refDays.textContent = addLeadingZero(dataObj.days);\n      refHours.textContent = addLeadingZero(dataObj.hours);\n      refMinutes.textContent = addLeadingZero(dataObj.minutes);\n      refSeconds.textContent = addLeadingZero(dataObj.seconds);\n    } else {\n      clearInterval(intervalId);\n      timerDateInput.disabled = false;\n    }\n  }, 1000)\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n\nfunction addLeadingZero(value) {\n    return value.toString().padStart(2, \"0\"); \n}"],"names":["timerDateInput","startBtn","refDays","refHours","refMinutes","refSeconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","onStartBtnClick","intervalId","dataObj","convertMs","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAa,SAAS,cAAc,gBAAgB,EAC1D,IAAIC,EACJL,EAAS,SAAW,GAGpB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,IAAM,KAAK,IAAG,GAC9BC,EAAS,KAAK,CACd,QAAS,oCACf,CAAC,EACKR,EAAS,SAAW,KAEpBK,EAAmBE,EAAc,GACjCP,EAAS,SAAW,GAEvB,CACH,EAEAS,EAAU,mBAAoBH,CAAO,EAErCN,EAAS,iBAAiB,QAASU,CAAe,EAElD,SAASA,GAAkB,CACzBV,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1B,MAAMY,EAAa,YAAY,IAAM,CACnC,GAAIN,EAAmB,KAAK,IAAG,GAAM,EAAG,CACtC,MAAMO,EAAUC,EAAUR,EAAmB,KAAK,IAAK,CAAA,EACvDJ,EAAQ,YAAca,EAAeF,EAAQ,IAAI,EACjDV,EAAS,YAAcY,EAAeF,EAAQ,KAAK,EACnDT,EAAW,YAAcW,EAAeF,EAAQ,OAAO,EACvDR,EAAW,YAAcU,EAAeF,EAAQ,OAAO,CAC7D,MACM,cAAcD,CAAU,EACxBZ,EAAe,SAAW,EAE7B,EAAE,GAAI,CACT,CAEA,SAASc,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASL,EAAeM,EAAO,CAC3B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C"}